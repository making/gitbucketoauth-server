/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.AccountRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

	private static final long serialVersionUID = -58235303;

	/**
	 * The reference instance of <code>PUBLIC.ACCOUNT</code>
	 */
	public static final Account ACCOUNT = new Account();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AccountRecord> getRecordType() {
		return AccountRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ACCOUNT.USER_NAME</code>.
	 */
	public final TableField<AccountRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.MAIL_ADDRESS</code>.
	 */
	public final TableField<AccountRecord, String> MAIL_ADDRESS = createField("MAIL_ADDRESS", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.PASSWORD</code>.
	 */
	public final TableField<AccountRecord, String> PASSWORD = createField("PASSWORD", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.ADMINISTRATOR</code>.
	 */
	public final TableField<AccountRecord, Boolean> ADMINISTRATOR = createField("ADMINISTRATOR", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.URL</code>.
	 */
	public final TableField<AccountRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.REGISTERED_DATE</code>.
	 */
	public final TableField<AccountRecord, Timestamp> REGISTERED_DATE = createField("REGISTERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.UPDATED_DATE</code>.
	 */
	public final TableField<AccountRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.LAST_LOGIN_DATE</code>.
	 */
	public final TableField<AccountRecord, Timestamp> LAST_LOGIN_DATE = createField("LAST_LOGIN_DATE", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.IMAGE</code>.
	 */
	public final TableField<AccountRecord, String> IMAGE = createField("IMAGE", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.GROUP_ACCOUNT</code>.
	 */
	public final TableField<AccountRecord, Boolean> GROUP_ACCOUNT = createField("GROUP_ACCOUNT", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.FULL_NAME</code>.
	 */
	public final TableField<AccountRecord, String> FULL_NAME = createField("FULL_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCOUNT.REMOVED</code>.
	 */
	public final TableField<AccountRecord, Boolean> REMOVED = createField("REMOVED", org.jooq.impl.SQLDataType.BOOLEAN.defaulted(true), this, "");

	/**
	 * Create a <code>PUBLIC.ACCOUNT</code> table reference
	 */
	public Account() {
		this("ACCOUNT", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ACCOUNT</code> table reference
	 */
	public Account(String alias) {
		this(alias, ACCOUNT);
	}

	private Account(String alias, Table<AccountRecord> aliased) {
		this(alias, aliased, null);
	}

	private Account(String alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AccountRecord> getPrimaryKey() {
		return Keys.IDX_ACCOUNT_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AccountRecord>> getKeys() {
		return Arrays.<UniqueKey<AccountRecord>>asList(Keys.IDX_ACCOUNT_PK, Keys.IDX_ACCOUNT_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Account as(String alias) {
		return new Account(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Account rename(String name) {
		return new Account(name, null);
	}
}
