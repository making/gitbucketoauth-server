/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.CommitStatusRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitStatus extends TableImpl<CommitStatusRecord> {

	private static final long serialVersionUID = 92911626;

	/**
	 * The reference instance of <code>PUBLIC.COMMIT_STATUS</code>
	 */
	public static final CommitStatus COMMIT_STATUS = new CommitStatus();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<CommitStatusRecord> getRecordType() {
		return CommitStatusRecord.class;
	}

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.COMMIT_STATUS_ID</code>.
	 */
	public final TableField<CommitStatusRecord, Integer> COMMIT_STATUS_ID = createField("COMMIT_STATUS_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.USER_NAME</code>.
	 */
	public final TableField<CommitStatusRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.REPOSITORY_NAME</code>.
	 */
	public final TableField<CommitStatusRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.COMMIT_ID</code>.
	 */
	public final TableField<CommitStatusRecord, String> COMMIT_ID = createField("COMMIT_ID", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.CONTEXT</code>.
	 */
	public final TableField<CommitStatusRecord, String> CONTEXT = createField("CONTEXT", org.jooq.impl.SQLDataType.VARCHAR.length(255).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.STATE</code>.
	 */
	public final TableField<CommitStatusRecord, String> STATE = createField("STATE", org.jooq.impl.SQLDataType.VARCHAR.length(10).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.TARGET_URL</code>.
	 */
	public final TableField<CommitStatusRecord, String> TARGET_URL = createField("TARGET_URL", org.jooq.impl.SQLDataType.VARCHAR.length(200), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.DESCRIPTION</code>.
	 */
	public final TableField<CommitStatusRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.CREATOR</code>.
	 */
	public final TableField<CommitStatusRecord, String> CREATOR = createField("CREATOR", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.REGISTERED_DATE</code>.
	 */
	public final TableField<CommitStatusRecord, Timestamp> REGISTERED_DATE = createField("REGISTERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.COMMIT_STATUS.UPDATED_DATE</code>.
	 */
	public final TableField<CommitStatusRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.COMMIT_STATUS</code> table reference
	 */
	public CommitStatus() {
		this("COMMIT_STATUS", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.COMMIT_STATUS</code> table reference
	 */
	public CommitStatus(String alias) {
		this(alias, COMMIT_STATUS);
	}

	private CommitStatus(String alias, Table<CommitStatusRecord> aliased) {
		this(alias, aliased, null);
	}

	private CommitStatus(String alias, Table<CommitStatusRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<CommitStatusRecord, Integer> getIdentity() {
		return Keys.IDENTITY_COMMIT_STATUS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<CommitStatusRecord> getPrimaryKey() {
		return Keys.IDX_COMMIT_STATUS_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<CommitStatusRecord>> getKeys() {
		return Arrays.<UniqueKey<CommitStatusRecord>>asList(Keys.IDX_COMMIT_STATUS_PK, Keys.IDX_COMMIT_STATUS_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<CommitStatusRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<CommitStatusRecord, ?>>asList(Keys.IDX_COMMIT_STATUS_FK1, Keys.IDX_COMMIT_STATUS_FK2, Keys.IDX_COMMIT_STATUS_FK3);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitStatus as(String alias) {
		return new CommitStatus(alias, this);
	}

	/**
	 * Rename this table
	 */
	public CommitStatus rename(String name) {
		return new CommitStatus(name, null);
	}
}
