/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq;


import am.ik.gitbucketoauth.jooq.tables.AccessToken;
import am.ik.gitbucketoauth.jooq.tables.Account;
import am.ik.gitbucketoauth.jooq.tables.Activity;
import am.ik.gitbucketoauth.jooq.tables.Collaborator;
import am.ik.gitbucketoauth.jooq.tables.CommitComment;
import am.ik.gitbucketoauth.jooq.tables.CommitStatus;
import am.ik.gitbucketoauth.jooq.tables.GroupMember;
import am.ik.gitbucketoauth.jooq.tables.Issue;
import am.ik.gitbucketoauth.jooq.tables.IssueComment;
import am.ik.gitbucketoauth.jooq.tables.IssueId;
import am.ik.gitbucketoauth.jooq.tables.IssueLabel;
import am.ik.gitbucketoauth.jooq.tables.Label;
import am.ik.gitbucketoauth.jooq.tables.Milestone;
import am.ik.gitbucketoauth.jooq.tables.Plugin;
import am.ik.gitbucketoauth.jooq.tables.PullRequest;
import am.ik.gitbucketoauth.jooq.tables.Repository;
import am.ik.gitbucketoauth.jooq.tables.SshKey;
import am.ik.gitbucketoauth.jooq.tables.WebHook;
import am.ik.gitbucketoauth.jooq.tables.records.AccessTokenRecord;
import am.ik.gitbucketoauth.jooq.tables.records.AccountRecord;
import am.ik.gitbucketoauth.jooq.tables.records.ActivityRecord;
import am.ik.gitbucketoauth.jooq.tables.records.CollaboratorRecord;
import am.ik.gitbucketoauth.jooq.tables.records.CommitCommentRecord;
import am.ik.gitbucketoauth.jooq.tables.records.CommitStatusRecord;
import am.ik.gitbucketoauth.jooq.tables.records.GroupMemberRecord;
import am.ik.gitbucketoauth.jooq.tables.records.IssueCommentRecord;
import am.ik.gitbucketoauth.jooq.tables.records.IssueIdRecord;
import am.ik.gitbucketoauth.jooq.tables.records.IssueLabelRecord;
import am.ik.gitbucketoauth.jooq.tables.records.IssueRecord;
import am.ik.gitbucketoauth.jooq.tables.records.LabelRecord;
import am.ik.gitbucketoauth.jooq.tables.records.MilestoneRecord;
import am.ik.gitbucketoauth.jooq.tables.records.PluginRecord;
import am.ik.gitbucketoauth.jooq.tables.records.PullRequestRecord;
import am.ik.gitbucketoauth.jooq.tables.records.RepositoryRecord;
import am.ik.gitbucketoauth.jooq.tables.records.SshKeyRecord;
import am.ik.gitbucketoauth.jooq.tables.records.WebHookRecord;

import javax.annotation.Generated;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;


/**
 * A class modelling foreign key relationships between tables of the <code>PUBLIC</code> 
 * schema
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

	// -------------------------------------------------------------------------
	// IDENTITY definitions
	// -------------------------------------------------------------------------

	public static final Identity<SshKeyRecord, Integer> IDENTITY_SSH_KEY = Identities0.IDENTITY_SSH_KEY;
	public static final Identity<LabelRecord, Integer> IDENTITY_LABEL = Identities0.IDENTITY_LABEL;
	public static final Identity<MilestoneRecord, Integer> IDENTITY_MILESTONE = Identities0.IDENTITY_MILESTONE;
	public static final Identity<IssueCommentRecord, Integer> IDENTITY_ISSUE_COMMENT = Identities0.IDENTITY_ISSUE_COMMENT;
	public static final Identity<ActivityRecord, Integer> IDENTITY_ACTIVITY = Identities0.IDENTITY_ACTIVITY;
	public static final Identity<CommitCommentRecord, Integer> IDENTITY_COMMIT_COMMENT = Identities0.IDENTITY_COMMIT_COMMENT;
	public static final Identity<AccessTokenRecord, Integer> IDENTITY_ACCESS_TOKEN = Identities0.IDENTITY_ACCESS_TOKEN;
	public static final Identity<CommitStatusRecord, Integer> IDENTITY_COMMIT_STATUS = Identities0.IDENTITY_COMMIT_STATUS;

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<CollaboratorRecord> IDX_COLLABORATOR_PK = UniqueKeys0.IDX_COLLABORATOR_PK;
	public static final UniqueKey<IssueIdRecord> IDX_ISSUE_ID_PK = UniqueKeys0.IDX_ISSUE_ID_PK;
	public static final UniqueKey<SshKeyRecord> IDX_SSH_KEY_PK = UniqueKeys0.IDX_SSH_KEY_PK;
	public static final UniqueKey<LabelRecord> IDX_LABEL_PK = UniqueKeys0.IDX_LABEL_PK;
	public static final UniqueKey<IssueLabelRecord> IDX_ISSUE_LABEL_PK = UniqueKeys0.IDX_ISSUE_LABEL_PK;
	public static final UniqueKey<MilestoneRecord> IDX_MILESTONE_PK = UniqueKeys0.IDX_MILESTONE_PK;
	public static final UniqueKey<IssueCommentRecord> IDX_ISSUE_COMMENT_PK = UniqueKeys0.IDX_ISSUE_COMMENT_PK;
	public static final UniqueKey<IssueCommentRecord> IDX_ISSUE_COMMENT_1 = UniqueKeys0.IDX_ISSUE_COMMENT_1;
	public static final UniqueKey<RepositoryRecord> IDX_REPOSITORY_PK = UniqueKeys0.IDX_REPOSITORY_PK;
	public static final UniqueKey<WebHookRecord> IDX_WEB_HOOK_PK = UniqueKeys0.IDX_WEB_HOOK_PK;
	public static final UniqueKey<GroupMemberRecord> IDX_GROUP_MEMBER_PK = UniqueKeys0.IDX_GROUP_MEMBER_PK;
	public static final UniqueKey<ActivityRecord> IDX_ACTIVITY_PK = UniqueKeys0.IDX_ACTIVITY_PK;
	public static final UniqueKey<PluginRecord> IDX_PLUGIN_PK = UniqueKeys0.IDX_PLUGIN_PK;
	public static final UniqueKey<CommitCommentRecord> IDX_COMMIT_COMMENT_PK = UniqueKeys0.IDX_COMMIT_COMMENT_PK;
	public static final UniqueKey<CommitCommentRecord> IDX_COMMIT_COMMENT_1 = UniqueKeys0.IDX_COMMIT_COMMENT_1;
	public static final UniqueKey<PullRequestRecord> IDX_PULL_REQUEST_PK = UniqueKeys0.IDX_PULL_REQUEST_PK;
	public static final UniqueKey<IssueRecord> IDX_ISSUE_PK = UniqueKeys0.IDX_ISSUE_PK;
	public static final UniqueKey<AccountRecord> IDX_ACCOUNT_PK = UniqueKeys0.IDX_ACCOUNT_PK;
	public static final UniqueKey<AccountRecord> IDX_ACCOUNT_1 = UniqueKeys0.IDX_ACCOUNT_1;
	public static final UniqueKey<AccessTokenRecord> IDX_ACCESS_TOKEN_PK = UniqueKeys0.IDX_ACCESS_TOKEN_PK;
	public static final UniqueKey<AccessTokenRecord> IDX_ACCESS_TOKEN_TOKEN_HASH = UniqueKeys0.IDX_ACCESS_TOKEN_TOKEN_HASH;
	public static final UniqueKey<CommitStatusRecord> IDX_COMMIT_STATUS_PK = UniqueKeys0.IDX_COMMIT_STATUS_PK;
	public static final UniqueKey<CommitStatusRecord> IDX_COMMIT_STATUS_1 = UniqueKeys0.IDX_COMMIT_STATUS_1;

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<CollaboratorRecord, RepositoryRecord> IDX_COLLABORATOR_FK0 = ForeignKeys0.IDX_COLLABORATOR_FK0;
	public static final ForeignKey<CollaboratorRecord, AccountRecord> IDX_COLLABORATOR_FK1 = ForeignKeys0.IDX_COLLABORATOR_FK1;
	public static final ForeignKey<IssueIdRecord, RepositoryRecord> IDX_ISSUE_ID_FK1 = ForeignKeys0.IDX_ISSUE_ID_FK1;
	public static final ForeignKey<SshKeyRecord, AccountRecord> IDX_SSH_KEY_FK0 = ForeignKeys0.IDX_SSH_KEY_FK0;
	public static final ForeignKey<LabelRecord, RepositoryRecord> IDX_LABEL_FK0 = ForeignKeys0.IDX_LABEL_FK0;
	public static final ForeignKey<IssueLabelRecord, IssueRecord> IDX_ISSUE_LABEL_FK0 = ForeignKeys0.IDX_ISSUE_LABEL_FK0;
	public static final ForeignKey<MilestoneRecord, RepositoryRecord> IDX_MILESTONE_FK0 = ForeignKeys0.IDX_MILESTONE_FK0;
	public static final ForeignKey<IssueCommentRecord, IssueRecord> IDX_ISSUE_COMMENT_FK0 = ForeignKeys0.IDX_ISSUE_COMMENT_FK0;
	public static final ForeignKey<RepositoryRecord, AccountRecord> IDX_REPOSITORY_FK0 = ForeignKeys0.IDX_REPOSITORY_FK0;
	public static final ForeignKey<WebHookRecord, RepositoryRecord> IDX_WEB_HOOK_FK0 = ForeignKeys0.IDX_WEB_HOOK_FK0;
	public static final ForeignKey<GroupMemberRecord, AccountRecord> IDX_GROUP_MEMBER_FK0 = ForeignKeys0.IDX_GROUP_MEMBER_FK0;
	public static final ForeignKey<GroupMemberRecord, AccountRecord> IDX_GROUP_MEMBER_FK1 = ForeignKeys0.IDX_GROUP_MEMBER_FK1;
	public static final ForeignKey<ActivityRecord, RepositoryRecord> IDX_ACTIVITY_FK0 = ForeignKeys0.IDX_ACTIVITY_FK0;
	public static final ForeignKey<ActivityRecord, AccountRecord> IDX_ACTIVITY_FK1 = ForeignKeys0.IDX_ACTIVITY_FK1;
	public static final ForeignKey<CommitCommentRecord, RepositoryRecord> IDX_COMMIT_COMMENT_FK0 = ForeignKeys0.IDX_COMMIT_COMMENT_FK0;
	public static final ForeignKey<PullRequestRecord, IssueRecord> IDX_PULL_REQUEST_FK0 = ForeignKeys0.IDX_PULL_REQUEST_FK0;
	public static final ForeignKey<IssueRecord, RepositoryRecord> IDX_ISSUE_FK0 = ForeignKeys0.IDX_ISSUE_FK0;
	public static final ForeignKey<IssueRecord, AccountRecord> IDX_ISSUE_FK1 = ForeignKeys0.IDX_ISSUE_FK1;
	public static final ForeignKey<AccessTokenRecord, AccountRecord> IDX_ACCESS_TOKEN_FK0 = ForeignKeys0.IDX_ACCESS_TOKEN_FK0;
	public static final ForeignKey<CommitStatusRecord, RepositoryRecord> IDX_COMMIT_STATUS_FK1 = ForeignKeys0.IDX_COMMIT_STATUS_FK1;
	public static final ForeignKey<CommitStatusRecord, AccountRecord> IDX_COMMIT_STATUS_FK2 = ForeignKeys0.IDX_COMMIT_STATUS_FK2;
	public static final ForeignKey<CommitStatusRecord, AccountRecord> IDX_COMMIT_STATUS_FK3 = ForeignKeys0.IDX_COMMIT_STATUS_FK3;

	// -------------------------------------------------------------------------
	// [#1459] distribute members to avoid static initialisers > 64kb
	// -------------------------------------------------------------------------

	private static class Identities0 extends AbstractKeys {
		public static Identity<SshKeyRecord, Integer> IDENTITY_SSH_KEY = createIdentity(SshKey.SSH_KEY, SshKey.SSH_KEY.SSH_KEY_ID);
		public static Identity<LabelRecord, Integer> IDENTITY_LABEL = createIdentity(Label.LABEL, Label.LABEL.LABEL_ID);
		public static Identity<MilestoneRecord, Integer> IDENTITY_MILESTONE = createIdentity(Milestone.MILESTONE, Milestone.MILESTONE.MILESTONE_ID);
		public static Identity<IssueCommentRecord, Integer> IDENTITY_ISSUE_COMMENT = createIdentity(IssueComment.ISSUE_COMMENT, IssueComment.ISSUE_COMMENT.COMMENT_ID);
		public static Identity<ActivityRecord, Integer> IDENTITY_ACTIVITY = createIdentity(Activity.ACTIVITY, Activity.ACTIVITY.ACTIVITY_ID);
		public static Identity<CommitCommentRecord, Integer> IDENTITY_COMMIT_COMMENT = createIdentity(CommitComment.COMMIT_COMMENT, CommitComment.COMMIT_COMMENT.COMMENT_ID);
		public static Identity<AccessTokenRecord, Integer> IDENTITY_ACCESS_TOKEN = createIdentity(AccessToken.ACCESS_TOKEN, AccessToken.ACCESS_TOKEN.ACCESS_TOKEN_ID);
		public static Identity<CommitStatusRecord, Integer> IDENTITY_COMMIT_STATUS = createIdentity(CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.COMMIT_STATUS_ID);
	}

	private static class UniqueKeys0 extends AbstractKeys {
		public static final UniqueKey<CollaboratorRecord> IDX_COLLABORATOR_PK = createUniqueKey(Collaborator.COLLABORATOR, Collaborator.COLLABORATOR.USER_NAME, Collaborator.COLLABORATOR.REPOSITORY_NAME, Collaborator.COLLABORATOR.COLLABORATOR_NAME);
		public static final UniqueKey<IssueIdRecord> IDX_ISSUE_ID_PK = createUniqueKey(IssueId.ISSUE_ID, IssueId.ISSUE_ID.USER_NAME, IssueId.ISSUE_ID.REPOSITORY_NAME);
		public static final UniqueKey<SshKeyRecord> IDX_SSH_KEY_PK = createUniqueKey(SshKey.SSH_KEY, SshKey.SSH_KEY.USER_NAME, SshKey.SSH_KEY.SSH_KEY_ID);
		public static final UniqueKey<LabelRecord> IDX_LABEL_PK = createUniqueKey(Label.LABEL, Label.LABEL.USER_NAME, Label.LABEL.REPOSITORY_NAME, Label.LABEL.LABEL_ID);
		public static final UniqueKey<IssueLabelRecord> IDX_ISSUE_LABEL_PK = createUniqueKey(IssueLabel.ISSUE_LABEL, IssueLabel.ISSUE_LABEL.USER_NAME, IssueLabel.ISSUE_LABEL.REPOSITORY_NAME, IssueLabel.ISSUE_LABEL.ISSUE_ID, IssueLabel.ISSUE_LABEL.LABEL_ID);
		public static final UniqueKey<MilestoneRecord> IDX_MILESTONE_PK = createUniqueKey(Milestone.MILESTONE, Milestone.MILESTONE.USER_NAME, Milestone.MILESTONE.REPOSITORY_NAME, Milestone.MILESTONE.MILESTONE_ID);
		public static final UniqueKey<IssueCommentRecord> IDX_ISSUE_COMMENT_PK = createUniqueKey(IssueComment.ISSUE_COMMENT, IssueComment.ISSUE_COMMENT.COMMENT_ID);
		public static final UniqueKey<IssueCommentRecord> IDX_ISSUE_COMMENT_1 = createUniqueKey(IssueComment.ISSUE_COMMENT, IssueComment.ISSUE_COMMENT.COMMENT_ID);
		public static final UniqueKey<RepositoryRecord> IDX_REPOSITORY_PK = createUniqueKey(Repository.REPOSITORY, Repository.REPOSITORY.USER_NAME, Repository.REPOSITORY.REPOSITORY_NAME);
		public static final UniqueKey<WebHookRecord> IDX_WEB_HOOK_PK = createUniqueKey(WebHook.WEB_HOOK, WebHook.WEB_HOOK.USER_NAME, WebHook.WEB_HOOK.REPOSITORY_NAME, WebHook.WEB_HOOK.URL);
		public static final UniqueKey<GroupMemberRecord> IDX_GROUP_MEMBER_PK = createUniqueKey(GroupMember.GROUP_MEMBER, GroupMember.GROUP_MEMBER.GROUP_NAME, GroupMember.GROUP_MEMBER.USER_NAME);
		public static final UniqueKey<ActivityRecord> IDX_ACTIVITY_PK = createUniqueKey(Activity.ACTIVITY, Activity.ACTIVITY.ACTIVITY_ID);
		public static final UniqueKey<PluginRecord> IDX_PLUGIN_PK = createUniqueKey(Plugin.PLUGIN, Plugin.PLUGIN.PLUGIN_ID);
		public static final UniqueKey<CommitCommentRecord> IDX_COMMIT_COMMENT_PK = createUniqueKey(CommitComment.COMMIT_COMMENT, CommitComment.COMMIT_COMMENT.COMMENT_ID);
		public static final UniqueKey<CommitCommentRecord> IDX_COMMIT_COMMENT_1 = createUniqueKey(CommitComment.COMMIT_COMMENT, CommitComment.COMMIT_COMMENT.COMMENT_ID);
		public static final UniqueKey<PullRequestRecord> IDX_PULL_REQUEST_PK = createUniqueKey(PullRequest.PULL_REQUEST, PullRequest.PULL_REQUEST.USER_NAME, PullRequest.PULL_REQUEST.REPOSITORY_NAME, PullRequest.PULL_REQUEST.ISSUE_ID);
		public static final UniqueKey<IssueRecord> IDX_ISSUE_PK = createUniqueKey(Issue.ISSUE, Issue.ISSUE.ISSUE_ID, Issue.ISSUE.USER_NAME, Issue.ISSUE.REPOSITORY_NAME);
		public static final UniqueKey<AccountRecord> IDX_ACCOUNT_PK = createUniqueKey(Account.ACCOUNT, Account.ACCOUNT.USER_NAME);
		public static final UniqueKey<AccountRecord> IDX_ACCOUNT_1 = createUniqueKey(Account.ACCOUNT, Account.ACCOUNT.MAIL_ADDRESS);
		public static final UniqueKey<AccessTokenRecord> IDX_ACCESS_TOKEN_PK = createUniqueKey(AccessToken.ACCESS_TOKEN, AccessToken.ACCESS_TOKEN.ACCESS_TOKEN_ID);
		public static final UniqueKey<AccessTokenRecord> IDX_ACCESS_TOKEN_TOKEN_HASH = createUniqueKey(AccessToken.ACCESS_TOKEN, AccessToken.ACCESS_TOKEN.TOKEN_HASH);
		public static final UniqueKey<CommitStatusRecord> IDX_COMMIT_STATUS_PK = createUniqueKey(CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.COMMIT_STATUS_ID);
		public static final UniqueKey<CommitStatusRecord> IDX_COMMIT_STATUS_1 = createUniqueKey(CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.USER_NAME, CommitStatus.COMMIT_STATUS.REPOSITORY_NAME, CommitStatus.COMMIT_STATUS.COMMIT_ID, CommitStatus.COMMIT_STATUS.CONTEXT);
	}

	private static class ForeignKeys0 extends AbstractKeys {
		public static final ForeignKey<CollaboratorRecord, RepositoryRecord> IDX_COLLABORATOR_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, Collaborator.COLLABORATOR, Collaborator.COLLABORATOR.USER_NAME, Collaborator.COLLABORATOR.REPOSITORY_NAME);
		public static final ForeignKey<CollaboratorRecord, AccountRecord> IDX_COLLABORATOR_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, Collaborator.COLLABORATOR, Collaborator.COLLABORATOR.COLLABORATOR_NAME);
		public static final ForeignKey<IssueIdRecord, RepositoryRecord> IDX_ISSUE_ID_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, IssueId.ISSUE_ID, IssueId.ISSUE_ID.USER_NAME, IssueId.ISSUE_ID.REPOSITORY_NAME);
		public static final ForeignKey<SshKeyRecord, AccountRecord> IDX_SSH_KEY_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, SshKey.SSH_KEY, SshKey.SSH_KEY.USER_NAME);
		public static final ForeignKey<LabelRecord, RepositoryRecord> IDX_LABEL_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, Label.LABEL, Label.LABEL.USER_NAME, Label.LABEL.REPOSITORY_NAME);
		public static final ForeignKey<IssueLabelRecord, IssueRecord> IDX_ISSUE_LABEL_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ISSUE_PK, IssueLabel.ISSUE_LABEL, IssueLabel.ISSUE_LABEL.USER_NAME, IssueLabel.ISSUE_LABEL.REPOSITORY_NAME, IssueLabel.ISSUE_LABEL.ISSUE_ID);
		public static final ForeignKey<MilestoneRecord, RepositoryRecord> IDX_MILESTONE_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, Milestone.MILESTONE, Milestone.MILESTONE.USER_NAME, Milestone.MILESTONE.REPOSITORY_NAME);
		public static final ForeignKey<IssueCommentRecord, IssueRecord> IDX_ISSUE_COMMENT_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ISSUE_PK, IssueComment.ISSUE_COMMENT, IssueComment.ISSUE_COMMENT.USER_NAME, IssueComment.ISSUE_COMMENT.REPOSITORY_NAME, IssueComment.ISSUE_COMMENT.ISSUE_ID);
		public static final ForeignKey<RepositoryRecord, AccountRecord> IDX_REPOSITORY_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, Repository.REPOSITORY, Repository.REPOSITORY.USER_NAME);
		public static final ForeignKey<WebHookRecord, RepositoryRecord> IDX_WEB_HOOK_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, WebHook.WEB_HOOK, WebHook.WEB_HOOK.USER_NAME, WebHook.WEB_HOOK.REPOSITORY_NAME);
		public static final ForeignKey<GroupMemberRecord, AccountRecord> IDX_GROUP_MEMBER_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, GroupMember.GROUP_MEMBER, GroupMember.GROUP_MEMBER.GROUP_NAME);
		public static final ForeignKey<GroupMemberRecord, AccountRecord> IDX_GROUP_MEMBER_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, GroupMember.GROUP_MEMBER, GroupMember.GROUP_MEMBER.USER_NAME);
		public static final ForeignKey<ActivityRecord, RepositoryRecord> IDX_ACTIVITY_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, Activity.ACTIVITY, Activity.ACTIVITY.USER_NAME, Activity.ACTIVITY.REPOSITORY_NAME);
		public static final ForeignKey<ActivityRecord, AccountRecord> IDX_ACTIVITY_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, Activity.ACTIVITY, Activity.ACTIVITY.ACTIVITY_USER_NAME);
		public static final ForeignKey<CommitCommentRecord, RepositoryRecord> IDX_COMMIT_COMMENT_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, CommitComment.COMMIT_COMMENT, CommitComment.COMMIT_COMMENT.USER_NAME, CommitComment.COMMIT_COMMENT.REPOSITORY_NAME);
		public static final ForeignKey<PullRequestRecord, IssueRecord> IDX_PULL_REQUEST_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ISSUE_PK, PullRequest.PULL_REQUEST, PullRequest.PULL_REQUEST.USER_NAME, PullRequest.PULL_REQUEST.REPOSITORY_NAME, PullRequest.PULL_REQUEST.ISSUE_ID);
		public static final ForeignKey<IssueRecord, RepositoryRecord> IDX_ISSUE_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, Issue.ISSUE, Issue.ISSUE.USER_NAME, Issue.ISSUE.REPOSITORY_NAME);
		public static final ForeignKey<IssueRecord, AccountRecord> IDX_ISSUE_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, Issue.ISSUE, Issue.ISSUE.OPENED_USER_NAME);
		public static final ForeignKey<AccessTokenRecord, AccountRecord> IDX_ACCESS_TOKEN_FK0 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, AccessToken.ACCESS_TOKEN, AccessToken.ACCESS_TOKEN.USER_NAME);
		public static final ForeignKey<CommitStatusRecord, RepositoryRecord> IDX_COMMIT_STATUS_FK1 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_REPOSITORY_PK, CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.USER_NAME, CommitStatus.COMMIT_STATUS.REPOSITORY_NAME);
		public static final ForeignKey<CommitStatusRecord, AccountRecord> IDX_COMMIT_STATUS_FK2 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.USER_NAME);
		public static final ForeignKey<CommitStatusRecord, AccountRecord> IDX_COMMIT_STATUS_FK3 = createForeignKey(am.ik.gitbucketoauth.jooq.Keys.IDX_ACCOUNT_PK, CommitStatus.COMMIT_STATUS, CommitStatus.COMMIT_STATUS.CREATOR);
	}
}
