/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.AccessTokenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessToken extends TableImpl<AccessTokenRecord> {

	private static final long serialVersionUID = 1288800583;

	/**
	 * The reference instance of <code>PUBLIC.ACCESS_TOKEN</code>
	 */
	public static final AccessToken ACCESS_TOKEN = new AccessToken();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<AccessTokenRecord> getRecordType() {
		return AccessTokenRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ACCESS_TOKEN.ACCESS_TOKEN_ID</code>.
	 */
	public final TableField<AccessTokenRecord, Integer> ACCESS_TOKEN_ID = createField("ACCESS_TOKEN_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.ACCESS_TOKEN.TOKEN_HASH</code>.
	 */
	public final TableField<AccessTokenRecord, String> TOKEN_HASH = createField("TOKEN_HASH", org.jooq.impl.SQLDataType.VARCHAR.length(40).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCESS_TOKEN.USER_NAME</code>.
	 */
	public final TableField<AccessTokenRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACCESS_TOKEN.NOTE</code>.
	 */
	public final TableField<AccessTokenRecord, String> NOTE = createField("NOTE", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ACCESS_TOKEN</code> table reference
	 */
	public AccessToken() {
		this("ACCESS_TOKEN", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ACCESS_TOKEN</code> table reference
	 */
	public AccessToken(String alias) {
		this(alias, ACCESS_TOKEN);
	}

	private AccessToken(String alias, Table<AccessTokenRecord> aliased) {
		this(alias, aliased, null);
	}

	private AccessToken(String alias, Table<AccessTokenRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<AccessTokenRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ACCESS_TOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<AccessTokenRecord> getPrimaryKey() {
		return Keys.IDX_ACCESS_TOKEN_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<AccessTokenRecord>> getKeys() {
		return Arrays.<UniqueKey<AccessTokenRecord>>asList(Keys.IDX_ACCESS_TOKEN_PK, Keys.IDX_ACCESS_TOKEN_TOKEN_HASH);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<AccessTokenRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<AccessTokenRecord, ?>>asList(Keys.IDX_ACCESS_TOKEN_FK0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public AccessToken as(String alias) {
		return new AccessToken(alias, this);
	}

	/**
	 * Rename this table
	 */
	public AccessToken rename(String name) {
		return new AccessToken(name, null);
	}
}
