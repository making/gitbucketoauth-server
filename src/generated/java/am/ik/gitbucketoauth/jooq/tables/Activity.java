/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.ActivityRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Activity extends TableImpl<ActivityRecord> {

	private static final long serialVersionUID = -591233138;

	/**
	 * The reference instance of <code>PUBLIC.ACTIVITY</code>
	 */
	public static final Activity ACTIVITY = new Activity();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ActivityRecord> getRecordType() {
		return ActivityRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ACTIVITY.ACTIVITY_ID</code>.
	 */
	public final TableField<ActivityRecord, Integer> ACTIVITY_ID = createField("ACTIVITY_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.USER_NAME</code>.
	 */
	public final TableField<ActivityRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.REPOSITORY_NAME</code>.
	 */
	public final TableField<ActivityRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.ACTIVITY_USER_NAME</code>.
	 */
	public final TableField<ActivityRecord, String> ACTIVITY_USER_NAME = createField("ACTIVITY_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.ACTIVITY_TYPE</code>.
	 */
	public final TableField<ActivityRecord, String> ACTIVITY_TYPE = createField("ACTIVITY_TYPE", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.MESSAGE</code>.
	 */
	public final TableField<ActivityRecord, String> MESSAGE = createField("MESSAGE", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.ADDITIONAL_INFO</code>.
	 */
	public final TableField<ActivityRecord, String> ADDITIONAL_INFO = createField("ADDITIONAL_INFO", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>PUBLIC.ACTIVITY.ACTIVITY_DATE</code>.
	 */
	public final TableField<ActivityRecord, Timestamp> ACTIVITY_DATE = createField("ACTIVITY_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ACTIVITY</code> table reference
	 */
	public Activity() {
		this("ACTIVITY", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ACTIVITY</code> table reference
	 */
	public Activity(String alias) {
		this(alias, ACTIVITY);
	}

	private Activity(String alias, Table<ActivityRecord> aliased) {
		this(alias, aliased, null);
	}

	private Activity(String alias, Table<ActivityRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<ActivityRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ACTIVITY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<ActivityRecord> getPrimaryKey() {
		return Keys.IDX_ACTIVITY_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<ActivityRecord>> getKeys() {
		return Arrays.<UniqueKey<ActivityRecord>>asList(Keys.IDX_ACTIVITY_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<ActivityRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<ActivityRecord, ?>>asList(Keys.IDX_ACTIVITY_FK0, Keys.IDX_ACTIVITY_FK1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Activity as(String alias) {
		return new Activity(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Activity rename(String name) {
		return new Activity(name, null);
	}
}
