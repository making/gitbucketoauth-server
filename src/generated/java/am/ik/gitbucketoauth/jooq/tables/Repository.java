/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.RepositoryRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Repository extends TableImpl<RepositoryRecord> {

	private static final long serialVersionUID = -1074151223;

	/**
	 * The reference instance of <code>PUBLIC.REPOSITORY</code>
	 */
	public static final Repository REPOSITORY = new Repository();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RepositoryRecord> getRecordType() {
		return RepositoryRecord.class;
	}

	/**
	 * The column <code>PUBLIC.REPOSITORY.USER_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.REPOSITORY_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.PRIVATE</code>.
	 */
	public final TableField<RepositoryRecord, Boolean> PRIVATE = createField("PRIVATE", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.DESCRIPTION</code>.
	 */
	public final TableField<RepositoryRecord, String> DESCRIPTION = createField("DESCRIPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.DEFAULT_BRANCH</code>.
	 */
	public final TableField<RepositoryRecord, String> DEFAULT_BRANCH = createField("DEFAULT_BRANCH", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.REGISTERED_DATE</code>.
	 */
	public final TableField<RepositoryRecord, Timestamp> REGISTERED_DATE = createField("REGISTERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.UPDATED_DATE</code>.
	 */
	public final TableField<RepositoryRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.LAST_ACTIVITY_DATE</code>.
	 */
	public final TableField<RepositoryRecord, Timestamp> LAST_ACTIVITY_DATE = createField("LAST_ACTIVITY_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.ORIGIN_USER_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> ORIGIN_USER_NAME = createField("ORIGIN_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.ORIGIN_REPOSITORY_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> ORIGIN_REPOSITORY_NAME = createField("ORIGIN_REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.PARENT_USER_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> PARENT_USER_NAME = createField("PARENT_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.REPOSITORY.PARENT_REPOSITORY_NAME</code>.
	 */
	public final TableField<RepositoryRecord, String> PARENT_REPOSITORY_NAME = createField("PARENT_REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * Create a <code>PUBLIC.REPOSITORY</code> table reference
	 */
	public Repository() {
		this("REPOSITORY", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.REPOSITORY</code> table reference
	 */
	public Repository(String alias) {
		this(alias, REPOSITORY);
	}

	private Repository(String alias, Table<RepositoryRecord> aliased) {
		this(alias, aliased, null);
	}

	private Repository(String alias, Table<RepositoryRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<RepositoryRecord> getPrimaryKey() {
		return Keys.IDX_REPOSITORY_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<RepositoryRecord>> getKeys() {
		return Arrays.<UniqueKey<RepositoryRecord>>asList(Keys.IDX_REPOSITORY_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<RepositoryRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<RepositoryRecord, ?>>asList(Keys.IDX_REPOSITORY_FK0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Repository as(String alias) {
		return new Repository(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Repository rename(String name) {
		return new Repository(name, null);
	}
}
