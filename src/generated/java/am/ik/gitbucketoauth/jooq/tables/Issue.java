/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.IssueRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Issue extends TableImpl<IssueRecord> {

	private static final long serialVersionUID = 696844251;

	/**
	 * The reference instance of <code>PUBLIC.ISSUE</code>
	 */
	public static final Issue ISSUE = new Issue();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<IssueRecord> getRecordType() {
		return IssueRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ISSUE.USER_NAME</code>.
	 */
	public final TableField<IssueRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.REPOSITORY_NAME</code>.
	 */
	public final TableField<IssueRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.ISSUE_ID</code>.
	 */
	public final TableField<IssueRecord, Integer> ISSUE_ID = createField("ISSUE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.OPENED_USER_NAME</code>.
	 */
	public final TableField<IssueRecord, String> OPENED_USER_NAME = createField("OPENED_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.MILESTONE_ID</code>.
	 */
	public final TableField<IssueRecord, Integer> MILESTONE_ID = createField("MILESTONE_ID", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.ASSIGNED_USER_NAME</code>.
	 */
	public final TableField<IssueRecord, String> ASSIGNED_USER_NAME = createField("ASSIGNED_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.TITLE</code>.
	 */
	public final TableField<IssueRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.CONTENT</code>.
	 */
	public final TableField<IssueRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.CLOSED</code>.
	 */
	public final TableField<IssueRecord, Boolean> CLOSED = createField("CLOSED", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.REGISTERED_DATE</code>.
	 */
	public final TableField<IssueRecord, Timestamp> REGISTERED_DATE = createField("REGISTERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.UPDATED_DATE</code>.
	 */
	public final TableField<IssueRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE.PULL_REQUEST</code>.
	 */
	public final TableField<IssueRecord, Boolean> PULL_REQUEST = createField("PULL_REQUEST", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaulted(true), this, "");

	/**
	 * Create a <code>PUBLIC.ISSUE</code> table reference
	 */
	public Issue() {
		this("ISSUE", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ISSUE</code> table reference
	 */
	public Issue(String alias) {
		this(alias, ISSUE);
	}

	private Issue(String alias, Table<IssueRecord> aliased) {
		this(alias, aliased, null);
	}

	private Issue(String alias, Table<IssueRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<IssueRecord> getPrimaryKey() {
		return Keys.IDX_ISSUE_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<IssueRecord>> getKeys() {
		return Arrays.<UniqueKey<IssueRecord>>asList(Keys.IDX_ISSUE_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<IssueRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<IssueRecord, ?>>asList(Keys.IDX_ISSUE_FK0, Keys.IDX_ISSUE_FK1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Issue as(String alias) {
		return new Issue(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Issue rename(String name) {
		return new Issue(name, null);
	}
}
