/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.WebHookRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WebHook extends TableImpl<WebHookRecord> {

	private static final long serialVersionUID = -1911656102;

	/**
	 * The reference instance of <code>PUBLIC.WEB_HOOK</code>
	 */
	public static final WebHook WEB_HOOK = new WebHook();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<WebHookRecord> getRecordType() {
		return WebHookRecord.class;
	}

	/**
	 * The column <code>PUBLIC.WEB_HOOK.USER_NAME</code>.
	 */
	public final TableField<WebHookRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.WEB_HOOK.REPOSITORY_NAME</code>.
	 */
	public final TableField<WebHookRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.WEB_HOOK.URL</code>.
	 */
	public final TableField<WebHookRecord, String> URL = createField("URL", org.jooq.impl.SQLDataType.VARCHAR.length(200).nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.WEB_HOOK</code> table reference
	 */
	public WebHook() {
		this("WEB_HOOK", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.WEB_HOOK</code> table reference
	 */
	public WebHook(String alias) {
		this(alias, WEB_HOOK);
	}

	private WebHook(String alias, Table<WebHookRecord> aliased) {
		this(alias, aliased, null);
	}

	private WebHook(String alias, Table<WebHookRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<WebHookRecord> getPrimaryKey() {
		return Keys.IDX_WEB_HOOK_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<WebHookRecord>> getKeys() {
		return Arrays.<UniqueKey<WebHookRecord>>asList(Keys.IDX_WEB_HOOK_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<WebHookRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<WebHookRecord, ?>>asList(Keys.IDX_WEB_HOOK_FK0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public WebHook as(String alias) {
		return new WebHook(alias, this);
	}

	/**
	 * Rename this table
	 */
	public WebHook rename(String name) {
		return new WebHook(name, null);
	}
}
