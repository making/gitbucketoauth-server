/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.SshKeyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SshKey extends TableImpl<SshKeyRecord> {

	private static final long serialVersionUID = -1648033160;

	/**
	 * The reference instance of <code>PUBLIC.SSH_KEY</code>
	 */
	public static final SshKey SSH_KEY = new SshKey();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<SshKeyRecord> getRecordType() {
		return SshKeyRecord.class;
	}

	/**
	 * The column <code>PUBLIC.SSH_KEY.USER_NAME</code>.
	 */
	public final TableField<SshKeyRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SSH_KEY.SSH_KEY_ID</code>.
	 */
	public final TableField<SshKeyRecord, Integer> SSH_KEY_ID = createField("SSH_KEY_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.SSH_KEY.TITLE</code>.
	 */
	public final TableField<SshKeyRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.SSH_KEY.PUBLIC_KEY</code>.
	 */
	public final TableField<SshKeyRecord, String> PUBLIC_KEY = createField("PUBLIC_KEY", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.SSH_KEY</code> table reference
	 */
	public SshKey() {
		this("SSH_KEY", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.SSH_KEY</code> table reference
	 */
	public SshKey(String alias) {
		this(alias, SSH_KEY);
	}

	private SshKey(String alias, Table<SshKeyRecord> aliased) {
		this(alias, aliased, null);
	}

	private SshKey(String alias, Table<SshKeyRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<SshKeyRecord, Integer> getIdentity() {
		return Keys.IDENTITY_SSH_KEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<SshKeyRecord> getPrimaryKey() {
		return Keys.IDX_SSH_KEY_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<SshKeyRecord>> getKeys() {
		return Arrays.<UniqueKey<SshKeyRecord>>asList(Keys.IDX_SSH_KEY_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<SshKeyRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<SshKeyRecord, ?>>asList(Keys.IDX_SSH_KEY_FK0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SshKey as(String alias) {
		return new SshKey(alias, this);
	}

	/**
	 * Rename this table
	 */
	public SshKey rename(String name) {
		return new SshKey(name, null);
	}
}
