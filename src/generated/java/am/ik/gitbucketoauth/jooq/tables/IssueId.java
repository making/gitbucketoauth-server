/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.IssueIdRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IssueId extends TableImpl<IssueIdRecord> {

	private static final long serialVersionUID = 392356616;

	/**
	 * The reference instance of <code>PUBLIC.ISSUE_ID</code>
	 */
	public static final IssueId ISSUE_ID = new IssueId();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<IssueIdRecord> getRecordType() {
		return IssueIdRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ISSUE_ID.USER_NAME</code>.
	 */
	public final TableField<IssueIdRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_ID.REPOSITORY_NAME</code>.
	 */
	public final TableField<IssueIdRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_ID.ISSUE_ID</code>.
	 */
	public final TableField<IssueIdRecord, Integer> ISSUE_ID_ = createField("ISSUE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ISSUE_ID</code> table reference
	 */
	public IssueId() {
		this("ISSUE_ID", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ISSUE_ID</code> table reference
	 */
	public IssueId(String alias) {
		this(alias, ISSUE_ID);
	}

	private IssueId(String alias, Table<IssueIdRecord> aliased) {
		this(alias, aliased, null);
	}

	private IssueId(String alias, Table<IssueIdRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<IssueIdRecord> getPrimaryKey() {
		return Keys.IDX_ISSUE_ID_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<IssueIdRecord>> getKeys() {
		return Arrays.<UniqueKey<IssueIdRecord>>asList(Keys.IDX_ISSUE_ID_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<IssueIdRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<IssueIdRecord, ?>>asList(Keys.IDX_ISSUE_ID_FK1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public IssueId as(String alias) {
		return new IssueId(alias, this);
	}

	/**
	 * Rename this table
	 */
	public IssueId rename(String name) {
		return new IssueId(name, null);
	}
}
