/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables.records;


import am.ik.gitbucketoauth.jooq.tables.CommitComment;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CommitCommentRecord extends UpdatableRecordImpl<CommitCommentRecord> implements Record12<String, String, String, Integer, String, String, String, Integer, Integer, Timestamp, Timestamp, Boolean> {

	private static final long serialVersionUID = 422154407;

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.USER_NAME</code>.
	 */
	public void setUserName(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.USER_NAME</code>.
	 */
	public String getUserName() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.REPOSITORY_NAME</code>.
	 */
	public void setRepositoryName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.REPOSITORY_NAME</code>.
	 */
	public String getRepositoryName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.COMMIT_ID</code>.
	 */
	public void setCommitId(String value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.COMMIT_ID</code>.
	 */
	public String getCommitId() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.COMMENT_ID</code>.
	 */
	public void setCommentId(Integer value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.COMMENT_ID</code>.
	 */
	public Integer getCommentId() {
		return (Integer) getValue(3);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.COMMENTED_USER_NAME</code>.
	 */
	public void setCommentedUserName(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.COMMENTED_USER_NAME</code>.
	 */
	public String getCommentedUserName() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.CONTENT</code>.
	 */
	public void setContent(String value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.CONTENT</code>.
	 */
	public String getContent() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.FILE_NAME</code>.
	 */
	public void setFileName(String value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.FILE_NAME</code>.
	 */
	public String getFileName() {
		return (String) getValue(6);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.OLD_LINE_NUMBER</code>.
	 */
	public void setOldLineNumber(Integer value) {
		setValue(7, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.OLD_LINE_NUMBER</code>.
	 */
	public Integer getOldLineNumber() {
		return (Integer) getValue(7);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.NEW_LINE_NUMBER</code>.
	 */
	public void setNewLineNumber(Integer value) {
		setValue(8, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.NEW_LINE_NUMBER</code>.
	 */
	public Integer getNewLineNumber() {
		return (Integer) getValue(8);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.REGISTERED_DATE</code>.
	 */
	public void setRegisteredDate(Timestamp value) {
		setValue(9, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.REGISTERED_DATE</code>.
	 */
	public Timestamp getRegisteredDate() {
		return (Timestamp) getValue(9);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.UPDATED_DATE</code>.
	 */
	public void setUpdatedDate(Timestamp value) {
		setValue(10, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.UPDATED_DATE</code>.
	 */
	public Timestamp getUpdatedDate() {
		return (Timestamp) getValue(10);
	}

	/**
	 * Setter for <code>PUBLIC.COMMIT_COMMENT.PULL_REQUEST</code>.
	 */
	public void setPullRequest(Boolean value) {
		setValue(11, value);
	}

	/**
	 * Getter for <code>PUBLIC.COMMIT_COMMENT.PULL_REQUEST</code>.
	 */
	public Boolean getPullRequest() {
		return (Boolean) getValue(11);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record12 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row12<String, String, String, Integer, String, String, String, Integer, Integer, Timestamp, Timestamp, Boolean> fieldsRow() {
		return (Row12) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row12<String, String, String, Integer, String, String, String, Integer, Integer, Timestamp, Timestamp, Boolean> valuesRow() {
		return (Row12) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return CommitComment.COMMIT_COMMENT.USER_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return CommitComment.COMMIT_COMMENT.REPOSITORY_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return CommitComment.COMMIT_COMMENT.COMMIT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field4() {
		return CommitComment.COMMIT_COMMENT.COMMENT_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return CommitComment.COMMIT_COMMENT.COMMENTED_USER_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return CommitComment.COMMIT_COMMENT.CONTENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field7() {
		return CommitComment.COMMIT_COMMENT.FILE_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field8() {
		return CommitComment.COMMIT_COMMENT.OLD_LINE_NUMBER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field9() {
		return CommitComment.COMMIT_COMMENT.NEW_LINE_NUMBER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field10() {
		return CommitComment.COMMIT_COMMENT.REGISTERED_DATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field11() {
		return CommitComment.COMMIT_COMMENT.UPDATED_DATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field12() {
		return CommitComment.COMMIT_COMMENT.PULL_REQUEST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUserName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getRepositoryName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getCommitId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value4() {
		return getCommentId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getCommentedUserName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getContent();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value7() {
		return getFileName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value8() {
		return getOldLineNumber();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value9() {
		return getNewLineNumber();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value10() {
		return getRegisteredDate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value11() {
		return getUpdatedDate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value12() {
		return getPullRequest();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value1(String value) {
		setUserName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value2(String value) {
		setRepositoryName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value3(String value) {
		setCommitId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value4(Integer value) {
		setCommentId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value5(String value) {
		setCommentedUserName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value6(String value) {
		setContent(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value7(String value) {
		setFileName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value8(Integer value) {
		setOldLineNumber(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value9(Integer value) {
		setNewLineNumber(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value10(Timestamp value) {
		setRegisteredDate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value11(Timestamp value) {
		setUpdatedDate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord value12(Boolean value) {
		setPullRequest(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public CommitCommentRecord values(String value1, String value2, String value3, Integer value4, String value5, String value6, String value7, Integer value8, Integer value9, Timestamp value10, Timestamp value11, Boolean value12) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		value10(value10);
		value11(value11);
		value12(value12);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached CommitCommentRecord
	 */
	public CommitCommentRecord() {
		super(CommitComment.COMMIT_COMMENT);
	}

	/**
	 * Create a detached, initialised CommitCommentRecord
	 */
	public CommitCommentRecord(String userName, String repositoryName, String commitId, Integer commentId, String commentedUserName, String content, String fileName, Integer oldLineNumber, Integer newLineNumber, Timestamp registeredDate, Timestamp updatedDate, Boolean pullRequest) {
		super(CommitComment.COMMIT_COMMENT);

		setValue(0, userName);
		setValue(1, repositoryName);
		setValue(2, commitId);
		setValue(3, commentId);
		setValue(4, commentedUserName);
		setValue(5, content);
		setValue(6, fileName);
		setValue(7, oldLineNumber);
		setValue(8, newLineNumber);
		setValue(9, registeredDate);
		setValue(10, updatedDate);
		setValue(11, pullRequest);
	}
}
