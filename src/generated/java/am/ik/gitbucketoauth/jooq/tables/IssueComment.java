/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables;


import am.ik.gitbucketoauth.jooq.Keys;
import am.ik.gitbucketoauth.jooq.Public;
import am.ik.gitbucketoauth.jooq.tables.records.IssueCommentRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IssueComment extends TableImpl<IssueCommentRecord> {

	private static final long serialVersionUID = 1154963151;

	/**
	 * The reference instance of <code>PUBLIC.ISSUE_COMMENT</code>
	 */
	public static final IssueComment ISSUE_COMMENT = new IssueComment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<IssueCommentRecord> getRecordType() {
		return IssueCommentRecord.class;
	}

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.USER_NAME</code>.
	 */
	public final TableField<IssueCommentRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.REPOSITORY_NAME</code>.
	 */
	public final TableField<IssueCommentRecord, String> REPOSITORY_NAME = createField("REPOSITORY_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.ISSUE_ID</code>.
	 */
	public final TableField<IssueCommentRecord, Integer> ISSUE_ID = createField("ISSUE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.COMMENT_ID</code>.
	 */
	public final TableField<IssueCommentRecord, Integer> COMMENT_ID = createField("COMMENT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.ACTION</code>.
	 */
	public final TableField<IssueCommentRecord, String> ACTION = createField("ACTION", org.jooq.impl.SQLDataType.VARCHAR.length(20).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.COMMENTED_USER_NAME</code>.
	 */
	public final TableField<IssueCommentRecord, String> COMMENTED_USER_NAME = createField("COMMENTED_USER_NAME", org.jooq.impl.SQLDataType.VARCHAR.length(100).nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.CONTENT</code>.
	 */
	public final TableField<IssueCommentRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.REGISTERED_DATE</code>.
	 */
	public final TableField<IssueCommentRecord, Timestamp> REGISTERED_DATE = createField("REGISTERED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * The column <code>PUBLIC.ISSUE_COMMENT.UPDATED_DATE</code>.
	 */
	public final TableField<IssueCommentRecord, Timestamp> UPDATED_DATE = createField("UPDATED_DATE", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

	/**
	 * Create a <code>PUBLIC.ISSUE_COMMENT</code> table reference
	 */
	public IssueComment() {
		this("ISSUE_COMMENT", null);
	}

	/**
	 * Create an aliased <code>PUBLIC.ISSUE_COMMENT</code> table reference
	 */
	public IssueComment(String alias) {
		this(alias, ISSUE_COMMENT);
	}

	private IssueComment(String alias, Table<IssueCommentRecord> aliased) {
		this(alias, aliased, null);
	}

	private IssueComment(String alias, Table<IssueCommentRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<IssueCommentRecord, Integer> getIdentity() {
		return Keys.IDENTITY_ISSUE_COMMENT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<IssueCommentRecord> getPrimaryKey() {
		return Keys.IDX_ISSUE_COMMENT_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<IssueCommentRecord>> getKeys() {
		return Arrays.<UniqueKey<IssueCommentRecord>>asList(Keys.IDX_ISSUE_COMMENT_PK, Keys.IDX_ISSUE_COMMENT_1);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<IssueCommentRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<IssueCommentRecord, ?>>asList(Keys.IDX_ISSUE_COMMENT_FK0);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public IssueComment as(String alias) {
		return new IssueComment(alias, this);
	}

	/**
	 * Rename this table
	 */
	public IssueComment rename(String name) {
		return new IssueComment(name, null);
	}
}
