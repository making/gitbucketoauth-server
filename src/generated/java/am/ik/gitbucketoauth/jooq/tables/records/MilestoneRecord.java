/**
 * This class is generated by jOOQ
 */
package am.ik.gitbucketoauth.jooq.tables.records;


import am.ik.gitbucketoauth.jooq.tables.Milestone;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MilestoneRecord extends UpdatableRecordImpl<MilestoneRecord> implements Record7<String, String, Integer, String, String, Timestamp, Timestamp> {

	private static final long serialVersionUID = -1515161629;

	/**
	 * Setter for <code>PUBLIC.MILESTONE.USER_NAME</code>.
	 */
	public void setUserName(String value) {
		setValue(0, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.USER_NAME</code>.
	 */
	public String getUserName() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.REPOSITORY_NAME</code>.
	 */
	public void setRepositoryName(String value) {
		setValue(1, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.REPOSITORY_NAME</code>.
	 */
	public String getRepositoryName() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.MILESTONE_ID</code>.
	 */
	public void setMilestoneId(Integer value) {
		setValue(2, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.MILESTONE_ID</code>.
	 */
	public Integer getMilestoneId() {
		return (Integer) getValue(2);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.TITLE</code>.
	 */
	public void setTitle(String value) {
		setValue(3, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.TITLE</code>.
	 */
	public String getTitle() {
		return (String) getValue(3);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.DESCRIPTION</code>.
	 */
	public void setDescription(String value) {
		setValue(4, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.DESCRIPTION</code>.
	 */
	public String getDescription() {
		return (String) getValue(4);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.DUE_DATE</code>.
	 */
	public void setDueDate(Timestamp value) {
		setValue(5, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.DUE_DATE</code>.
	 */
	public Timestamp getDueDate() {
		return (Timestamp) getValue(5);
	}

	/**
	 * Setter for <code>PUBLIC.MILESTONE.CLOSED_DATE</code>.
	 */
	public void setClosedDate(Timestamp value) {
		setValue(6, value);
	}

	/**
	 * Getter for <code>PUBLIC.MILESTONE.CLOSED_DATE</code>.
	 */
	public Timestamp getClosedDate() {
		return (Timestamp) getValue(6);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record3<String, String, Integer> key() {
		return (Record3) super.key();
	}

	// -------------------------------------------------------------------------
	// Record7 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<String, String, Integer, String, String, Timestamp, Timestamp> fieldsRow() {
		return (Row7) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row7<String, String, Integer, String, String, Timestamp, Timestamp> valuesRow() {
		return (Row7) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return Milestone.MILESTONE.USER_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Milestone.MILESTONE.REPOSITORY_NAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field3() {
		return Milestone.MILESTONE.MILESTONE_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field4() {
		return Milestone.MILESTONE.TITLE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field5() {
		return Milestone.MILESTONE.DESCRIPTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field6() {
		return Milestone.MILESTONE.DUE_DATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field7() {
		return Milestone.MILESTONE.CLOSED_DATE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUserName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getRepositoryName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value3() {
		return getMilestoneId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value4() {
		return getTitle();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value5() {
		return getDescription();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value6() {
		return getDueDate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value7() {
		return getClosedDate();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value1(String value) {
		setUserName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value2(String value) {
		setRepositoryName(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value3(Integer value) {
		setMilestoneId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value4(String value) {
		setTitle(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value5(String value) {
		setDescription(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value6(Timestamp value) {
		setDueDate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord value7(Timestamp value) {
		setClosedDate(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public MilestoneRecord values(String value1, String value2, Integer value3, String value4, String value5, Timestamp value6, Timestamp value7) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached MilestoneRecord
	 */
	public MilestoneRecord() {
		super(Milestone.MILESTONE);
	}

	/**
	 * Create a detached, initialised MilestoneRecord
	 */
	public MilestoneRecord(String userName, String repositoryName, Integer milestoneId, String title, String description, Timestamp dueDate, Timestamp closedDate) {
		super(Milestone.MILESTONE);

		setValue(0, userName);
		setValue(1, repositoryName);
		setValue(2, milestoneId);
		setValue(3, title);
		setValue(4, description);
		setValue(5, dueDate);
		setValue(6, closedDate);
	}
}
